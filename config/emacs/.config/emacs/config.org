#+Title: Emacs Config
#+Author: Mathis Albertzard
#+Description: My Config based on a starter config probably don't use this I have no clue
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes

* Table Of Contents :toc_3:
- [[#early-init][Early init]]
- [[#grunt-work-to-make-emacs-behave][Grunt work to make Emacs behave]]
  - [[#bootstrapping-and-installing-packages][Bootstrapping and installing packages]]
  - [[#increase-performance][Increase performance]]
  - [[#keep-folders-clean][Keep folders clean]]
  - [[#sensible-defaults][Sensible Defaults]]
  - [[#performance-tweaks][Performance Tweaks]]
  - [[#start-emacs-server-on-startup][Start Emacs server on startup]]
  - [[#save-changes-automaticly][Save changes automaticly]]
- [[#ui-stuff][UI Stuff]]
  - [[#line-numbers][Line Numbers]]
  - [[#hyperbole][Hyperbole]]
  - [[#scroll-margins][Scroll Margins]]
  - [[#modeline][Modeline]]
  - [[#theme][Theme]]
  - [[#font][Font]]
  - [[#zoom][Zoom]]
  - [[#which-key][Which Key]]
- [[#completions][Completions]]
  - [[#completions-at-point][Completions at point]]
  - [[#vertical-completions][Vertical Completions]]
  - [[#actions-on-completions][Actions on completions]]
  - [[#spelling][Spelling]]
- [[#development][Development]]
  - [[#infos][Info's]]
  - [[#error][Error]]
  - [[#syntax-highlighting][Syntax Highlighting]]
    - [[#folding][Folding]]
    - [[#tree-sitter-config][Tree-sitter Config]]
    - [[#lua-mode][Lua Mode]]
  - [[#dumb-jump][Dumb Jump]]
  - [[#lsp][LSP]]
    - [[#dape][Dape]]
    - [[#eglot][Eglot]]
  - [[#terminal-emulation][Terminal Emulation]]
  - [[#docker][Docker]]
- [[#project-management][Project Management]]
  - [[#desktop-mode][Desktop mode]]
  - [[#custom-project-functions][Custom Project Functions]]
  - [[#tab-groups-per-project][Tab Groups per project]]
  - [[#editor-conf][Editor Conf]]
  - [[#git-stuff][Git Stuff]]
    - [[#magit][Magit]]
    - [[#gutter][Gutter]]
  - [[#file-management][File Management]]
    - [[#wgrep][Wgrep]]
    - [[#dired-tweaks][Dired Tweaks]]
    - [[#harpoon][Harpoon]]
- [[#helper-packages][Helper packages]]
  - [[#midnight-commander][Midnight commander]]
  - [[#surround][Surround]]
  - [[#move-files][Move Files]]
  - [[#better-undo-and-redo][Better undo and redo]]
  - [[#making-emacs-more-explorable][Making Emacs more explorable]]
  - [[#manage-system-packages-from-inside-emacs][Manage System packages from inside Emacs]]
  - [[#manage-system-processes-from-inside-emacs][Manage System processes from inside Emacs]]
  - [[#useful-commands][Useful commands]]
  - [[#collection-of-useful-commands][Collection of useful commands]]
- [[#file-specific-modes][File specific Modes]]
  - [[#pdf-tools][PDF Tools]]
  - [[#python][Python]]
  - [[#markdown][Markdown]]
    - [[#markdown-mode][Markdown Mode]]
  - [[#nix][Nix]]
  - [[#org][Org]]
    - [[#org-mode][Org Mode]]
    - [[#table-of-contents][Table of Contents]]
    - [[#org-modern][Org Modern]]
- [[#keymaps][Keymaps]]
  - [[#meow][Meow]]
    - [[#meow-basic-layout][Meow Basic Layout]]
    - [[#meow-things-for-semantic-editing][Meow Things for semantic editing]]
  - [[#window--buffer-nav][Window / Buffer Nav]]
    - [[#mark-ring-nav][Mark Ring Nav]]
    - [[#buffer][Buffer]]
    - [[#switching-windows][Switching Windows]]
  - [[#development-1][Development]]
    - [[#terminal][Terminal]]
    - [[#error-1][Error]]
  - [[#replacing-stuff][Replacing stuff]]
  - [[#file-stuff][File Stuff]]
  - [[#search-stuff][Search Stuff]]

* Early init
#+begin_src emacs-lisp :tangle early-init.el
    (setq gc-cons-threshold 10000000)
    (setq byte-compile-warnings '(not obsolete))
    (setq warning-suppress-log-types '((comp) (bytecomp)))
    (setq native-comp-async-report-warnings-errors 'silent)

    ;; Silence stupid startup message
    (setq inhibit-startup-echo-area-message (user-login-name))

    ;; Default frame configuration: full screen, good-looking title bar on macOS
    (setq frame-resize-pixelwise t)
    (tool-bar-mode -1)                      ; All these tools are in the menu-bar anyway
    (setq default-frame-alist '((fullscreen . maximized)
                                (vertical-scroll-bars . nil)
                                (horizontal-scroll-bars . nil)
                                (ns-transparent-titlebar . t)))

    (when (and (fboundp 'startup-redirect-eln-cache)
               (fboundp 'native-comp-available-p)
               (native-comp-available-p))
      (startup-redirect-eln-cache
       (convert-standard-filename
        (expand-file-name  "var/eln-cache/" user-emacs-directory))))

    (setq package-enable-at-startup nil)
#+end_src

* Grunt work to make Emacs behave
** Bootstrapping and installing packages

#+begin_src emacs-lisp
    (setq lexical-binding t)
    ;;; -*- lexical-binding: t -*-

    (setq package-enable-at-startup nil)
    ;;(setq use-package-ensure-function 'ignore)
    ;;(setq package-archives nil)
#+end_src
** Increase performance
#+begin_src emacs-lisp
    (use-package compile-angel
      :ensure t
      :demand t
      :init
      :config
      (setq compile-angel-verbose t)

      ;; Compiles .el files before they are loaded.
      (compile-angel-on-load-mode))
#+end_src

** Keep folders clean
#+begin_src emacs-lisp
    (use-package no-littering
      :ensure t
      :config
      (no-littering-theme-backups))

    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
#+end_src

** Sensible Defaults
#+BEGIN_SRC emacs-lisp
    (use-package emacs
      :ensure nil
      :custom
      (menu-bar-mode nil)
      (scroll-bar-mode nil)
      (tool-bar-mode nil)
      (inhibit-startup-screen t)
      (delete-selection-mode t)
      (electric-indent-mode nil)
      (electric-pair-mode t)
      (display-battery-mode t)
      (ring-bell-function 'ignore)
      (blink-cursor-mode nil)
      (global-auto-revert-mode t)
      (dired-kill-when-opening-new-dired-buffer t)
      (truncate-lines t)
      (gnus-agent nil)
      (defalias 'yes-or-no-p 'y-or-n-p)
      (mouse-wheel-progressive-speed nil)
      (tab-width 4)
      (make-backup-files nil)
      (auto-save-default nil)
      :config
      :bind (
    		 ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
    		 )
      :hook
      (prog-mode . (lambda () (hs-minor-mode t))))
#+END_SRC
** Performance Tweaks
#+begin_src emacs-lisp
    (use-package gcmh
      :ensure t
      :init (setq gc-cons-threshold most-positive-fixnum)
      :hook (emacs-startup . gcmh-mode)
      :custom
      (gcmh-idle-delay 'auto)
      (gcmh-auto-idle-delay-factor 10)
      (gcmh-high-cons-threshold (* 16 1024 1024)))
#+END_SRC

** Start Emacs server on startup
Ensure the Emacs server is started if not already running
#+begin_src emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
#+END_SRC
** Save changes automaticly

#+BEGIN_SRC emacs-lisp
    (custom-set-variables
     '(auto-save-visited-mode t))

    (setq auto-save-visited-interval 2)
#+END_SRC
* UI Stuff
** Line Numbers
#+BEGIN_SRC emacs-lisp
    (use-package emacs
      :ensure nil
      :custom
      (display-line-numbers-type 'relative)
      (global-display-line-numbers-mode t))

    (defun disable-line-numbers ()
      "Disable display-line-numbers-mode for certain modes."
      (display-line-numbers-mode 0))

    (add-hook 'dired-mode-hook 'disable-line-numbers)
    (add-hook 'eat-mode-hook 'disable-line-numbers)
    (add-hook 'org-mode-hook 'disable-line-numbers)
    (add-hook 'compilation-mode-hook 'disable-line-numbers)
#+end_src
** Hyperbole
#+BEGIN_SRC emacs-lisp
    (use-package hyperbole
      :ensure t
      :config (hyperbole-mode t))
#+END_SRC

** Scroll Margins
#+BEGIN_SRC emacs-lisp
    (use-package emacs
      :ensure nil
      :custom
      (scroll-conservatively 10)
      (scroll-margin 10))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
    (use-package time
      :ensure nil
      :config
      (setq display-time-24hr-format t)
      (setq display-time-default-load-average nil)
      (display-time-mode 1))

    (use-package battery
      :ensure nil
      (display-battery-mode 1))

    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))

    (use-package minions
      :ensure t
      :config (minions-mode 1))

#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :ensure t
      :config
      (setq doom-themes-enable-bold t
            doom-themes-enable-italic t)
      (load-theme 'doom-gruvbox t)
      (doom-themes-org-config))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil
                        :height 120
                        :weight 'medium)
    (setq-default line-spacing 0.15)
#+END_SRC

** Zoom
#+BEGIN_SRC emacs-lisp
    (use-package emacs
      :ensure nil
      :bind
      ("C-+" . text-scale-increase)
      ("C--" . text-scale-decrease)
      ("<C-wheel-up>" . text-scale-increase)
      ("<C-wheel-down>" . text-scale-decrease))
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure nil
      :config
      (setq which-key-popup-type 'minibuffer)
      (which-key-mode))

#+END_SRC
* Completions
** Completions at point
#+BEGIN_SRC emacs-lisp
    (use-package orderless
      :ensure t
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))

    (use-package corfu
      :ensure t
      :after orderless
      :custom
      (corfu-cycle nil)
      (corfu-auto t)
      (corfu-auto-prefix 2)
      (corfu-popupinfo-mode t)
      (corfu-popupinfo-delay 0.15)
      (corfu-separator ?\s)
      (corfu-count 10)
      (corfu-scroll-margin 4)
      (completion-ignore-case t)
      (tab-always-indent 'complete)
      (corfu-preview-current nil)
      (completion-styles '(orderless basic))
      :init
      (global-corfu-mode))

    (use-package nerd-icons-corfu
      :ensure t
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

    (use-package cape
      :ensure t
      :after corfu
      :init
      (add-to-list 'completion-at-point-functions #'cape-dabbrev)
      (add-to-list 'completion-at-point-functions #'cape-dict)
      (add-to-list 'completion-at-point-functions #'cape-file)
      (add-to-list 'completion-at-point-functions #'cape-elisp-block)
      (add-to-list 'completion-at-point-functions #'cape-keyword)
      (add-to-list 'completion-at-point-functions #'cape-history)
      (add-to-list 'completion-at-point-functions #'cape-elisp-symbol))

    (advice-add 'eglot-completion-at-point :around #'cape-wrap-buster)
    (setq completion-category-overrides '((eglot (styles orderless))
                                          (eglot-capf (styles orderless))))
#+END_SRC
** Vertical Completions
#+BEGIN_SRC emacs-lisp
    (use-package vertico
      :ensure t
      :bind (:map vertico-map
                  ("<tab>" . vertico-insert)
                  ("C-j" . vertico-next)
                  ("C-k" . vertico-previous)
        		  ("C-l" . vertico-exit))
      :custom
      (vertico-cycle t)
      (vertico-count 13)
      (vertico-resize t)
      :init
      (vertico-mode))

    (use-package xref
      :custom
      (xref-show-definitions-function #'xref-show-definitions-completing-read))


    (use-package marginalia
      :ensure t
      :after vertico
      :custom
      (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :ensure t
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      (marginalia-mode-hook . nerd-icons-completion-marginalia-setup))
#+END_SRC
** Actions on completions
#+BEGIN_SRC emacs-lisp
    (use-package embark
      :ensure t
      :bind (("C-." . embark-act)
             :map minibuffer-local-map
             ("C-c C-c" . embark-collect)
             ("C-c C-e" . embark-export)))

    (use-package embark-consult
      :ensure t
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))
#+END_SRC
** Spelling
#+BEGIN_SRC emacs-lisp
    (use-package jinx
      :ensure t
      :bind (("M-$" . jinx-correct)
             ("C-M-$" . jinx-languages)))
#+END_SRC

* Development
** Info's
#+BEGIN_SRC emacs-lisp
    (setq eldoc-echo-area-use-multiline-p nil)

    (setq eldoc-documentation-strategy 'eldoc-documentation-compose)

    (setq eldoc-idle-delay 0.1)

    (use-package eldoc-box
      :ensure t
      :after eglot
      :config
      ;; (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-mode nil)
      (setq eldoc-box-hover-mode nil)
      (setq eldoc-box-cleanup-interval 3))
#+END_SRC
** Error
Lets use flycheck and not flymake
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :bind (
    		 ("C-c e k" . flycheck-previous-error)
    		 ("C-c e j" . flycheck-next-error)
    		 ("C-c e l" . flycheck-list-errors)
    		 ("C-c e e" . flycheck-explain-error-at-point)
    		 ("C-c e d" . flycheck-display-error-at-point)
    		 )
      )
#+end_src

Connection flycheck with eglot and the lsps
#+BEGIN_SRC emacs-lisp
    (use-package flycheck-eglot
      :ensure t
      :after (flycheck eglot)
      :config
      (global-flycheck-eglot-mode 1))
#+end_src
** Syntax Highlighting
*** Folding
#+BEGIN_SRC emacs-lisp
    ;; (use-package ts-fold
    ;;   :straight (ts-fold :type git :host github :repo "emacs-tree-sitter/ts-fold"))
#+END_SRC
*** Tree-sitter Config
#+begin_src emacs-lisp
    (use-package tree-sitter
      :ensure nil
      :config(global-tree-sitter-mode
              (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)))

    (setq treesit-font-lock-level 4)

    (use-package treesit-auto
      :after (tree-sitter)
      :ensure t
      :config
      (setq treesit-auto-langs '(lua ruby zig python rust go toml yaml json php))
      (global-treesit-auto-mode))

    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-ts-mode))
    (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
    (add-to-list 'auto-mode-alist '("\\.go\\'" . go-ts-mode))
    (add-to-list 'auto-mode-alist '("\\.ruby\\'" . ruby-ts-mode))
    (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js-ts-mode))
#+end_src
**** Tree-sitter Pre Compiles Langs
#+BEGIN_SRC emacs-lisp
    (use-package tree-sitter-langs
      :after (tree-sitter)
      :ensure t)

    (defun my/move-tree-sitter-grammar-files ()
      "Move all files from `tree-sitter-langs-grammar-dir/bin` to `~/.config/emacs/tree-sitter`,
              appending 'libtree-sitter-' to the front of each filename."
      (interactive)
      (let* ((source-dir (expand-file-name "bin" tree-sitter-langs-grammar-dir))
             (target-dir (expand-file-name "~/.config/emacs/tree-sitter"))
             (files (directory-files source-dir t "^[^.].*"))) ; Get all files, excluding hidden files
        (unless (file-exists-p target-dir)
          (make-directory target-dir t)) ; Create target directory if it doesn't exist
        (dolist (file files)
          (let ((filename (file-name-nondirectory file))
                (new-filename (concat "libtree-sitter-" (file-name-nondirectory file))))
            (rename-file file (expand-file-name new-filename target-dir) t)))))
#+END_SRC
**** Tree-sitter source List
#+BEGIN_SRC emacs-lisp
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (zig "https://github.com/GrayJack/tree-sitter-zig")
            (go "https://github.com/tree-sitter/tree-sitter-go" "v0.23.1" "src")
            (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
            (gdscript "https://github.com/PrestonKnopp/tree-sitter-gdscript")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
            (dockerfile "https://github.com/camdencheek/tree-sitter-dockerfile")
            (make "https://github.com/alemuller/tree-sitter-make")
            (rust "https://github.com/tree-sitter/tree-sitter-rust")
            (php "https://github.com/tree-sitter/tree-sitter-php" "v0.21.1" "php/src")
            (phpdoc "https://github.com/claytonrcarter/tree-sitter-phpdoc" "master" "src")
            (twig "https://github.com/kaermorchen/tree-sitter-twig")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

    ;; Install all langs
    (defun my/treesitter-install-alist ()
      "Install all ts parsers from treesitter alist"
      (interactive)
      (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist)))
#+END_SRC

*** Lua Mode
#+BEGIN_SRC emacs-lisp
    (use-package lua-mode :ensure t)
#+END_SRC

** Dumb Jump
#+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :ensure t
      :config
      (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
      :custom
      (dumb-jump-force-searcher 'rg))
#+END_SRC

** LSP
*** Dape
#+BEGIN_SRC emacs-lisp
    (use-package dape
      :ensure t
      :preface
      (setq dape-key-prefix "\C-c L")
      :config
      (setq dape-cwd-fn 'projectile-project-root)
      (setq dape-buffer-window-arrangement 'right)
      (add-to-list 'dape-configs
    			   `(debugpy-flask
    				 modes (python-mode jinja2-mode)
    				 command "python"
    				 command-args ["-m" "debugpy.adapter" "--host" "0.0.0.0" "--port" :autoport]
    				 port :autoport
    				 :type "python"
    				 :request "launch"
    				 :module "flask"
    				 :args ["--app" "src" "run" "--no-debugger" "--no-reload"]
    				 :console "integratedTerminal"
    				 :showReturnValue t
    				 :justMyCode nil
    				 :jinja t
    				 :cwd dape-cwd-fn)
    			   ))
#+END_SRC
*** Eglot
#+BEGIN_SRC emacs-lisp
    (use-package eglot
      :ensure nil ;; Don't install eglot because it's now built-in
      :config
      (add-hook 'go-ts-mode-hook 'eglot-ensure)
      (add-hook 'ruby-ts-mode-hook 'eglot-ensure)
      (add-hook 'python-ts-mode-hook 'eglot-ensure)
      (add-hook 'rust-ts-mode-hook 'eglot-ensure)
      (add-hook 'js-ts-mode-hook 'eglot-ensure)
      (add-hook 'typescript-ts-mode-hook 'eglot-ensure)
      (add-hook 'php-mode-hook 'eglot-ensure)
      :custom
      (eglot-autoshutdown t)
      (fset #'jsonrpc--log-event #'ignore)
      (eglot-events-buffer-size 0) ;; No event buffers (Lsp server logs)
      (eglot-report-progress nil)
      (eglot-events-buffer-size 0)
      (eglot-sync-connect nil)
      (eglot-extend-to-xref nil)
      :bind (:map eglot-mode-map
            	  ("C-c l l" . eldoc-box-help-at-point)
            	  ("C-c l d" . eglot-find-declaration)
            	  ("C-c l i" . eglot-find-implementation)
            	  ("C-c l t" . eglot-find-typeDefinition)
            	  ("C-c l a" . eglot-code-actions)
            	  ("C-c l I" . eglot-code-action-organize-imports)
            	  ("C-c l f" . eglot-format-buffer)
            	  ("C-c l r" . eglot-rename)))

    (setq eglot-ignored-server-capabilities '(:documentHighlightProvider :inlayHintProvider))

    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   '(gdscript-mode . ("localhost:6005"))))

                  ;;; Mason from neovim is just a great way to manage lsps
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   '(bash-ts-mode . ("~/.local/share/nvim/mason/bin/bash-language-server"))))

    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   '(go-ts-mode . ("gopls"))))

    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   '(rust-ts-mode . ("rust-analyzer"))))
#+END_SRC

** Terminal Emulation

#+begin_src emacs-lisp
    (use-package eat
      :ensure t
      :hook ('eshell-load-hook #'eat-eshell-mode))
#+END_SRC

** Docker
#+begin_src emacs-lisp
    (use-package docker
      :ensure t
      :bind ("C-c D" . docker))
#+end_src

* Project Management
** Desktop mode 
#+BEGIN_SRC emacs-lisp
    (setq desktop-path '("~/")) 
    (desktop-save-mode 1)
#+END_SRC

** Custom Project Functions
#+BEGIN_SRC emacs-lisp
    (defun my/find-buffer ()
      "Use `consult-project-buffer` if in a project, otherwise `consult-buffer`."
      (interactive)
      (if (vc-root-dir)
          (consult-project-buffer)
        (consult-buffer)))

    (defun my/find-file ()
      "Use `consult-project-buffer` if in a project, otherwise `consult-buffer`."
      (interactive)
      (if (vc-root-dir)
          (project-find-file)
        (find-file)))

    (defun my/dired ()
      "Use `consult-project-buffer` if in a project, otherwise `consult-buffer`."
      (interactive)
      (if (vc-root-dir)
          (project-dired)
        (dired)))

    (defun my/eat ()
      "Use `consult-project-buffer` if in a project, otherwise `consult-buffer`."
      (interactive)
      (if (vc-root-dir)
          (eat-project)
        (eat)))

    (defun my/eat-other-window ()
      "Use `consult-project-buffer` if in a project, otherwise `consult-buffer`."
      (interactive)
      (if (vc-root-dir)
      	  (eat-project-other-window)
        (eat-other-window)))
#+END_SRC

** Tab Groups per project
#+BEGIN_SRC emacs-lisp
    (setq tab-bar-show t)

    (setq tab-bar-format '(tab-bar-format-history tab-bar-format-tabs-groups tab-bar-separator tab-bar-format-add-tab))

    (use-package project-tab-groups
      :ensure t
      :config
      (project-tab-groups-mode 1))
#+END_SRC

** Editor Conf
We want to use the same Configurations as out teammates
#+BEGIN_SRC emacs-lisp
    (use-package editorconfig
      :config
      (editorconfig-mode 1))
#+END_SRC

** Git Stuff
*** Magit
#+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind (("C-c G G" . magit-status))
      :commands magit-status)

    (use-package magit-todos
      :ensure t
      :after magit
      :config (magit-todos-mode 1))
#+END_SRC

*** Gutter
#+begin_src emacs-lisp
    (use-package git-gutter
      :ensure t
      :bind (("C-c G s" . git-gutter:stage-hunk)
    		 ("C-c G k" . git-gutter:previous-hunk)
    		 ("C-c G j" . git-gutter:next-hunk))
      :config(global-git-gutter-mode +1))
#+end_src

** File Management
*** Wgrep
#+begin_src emacs-lisp
    (use-package wgrep :ensure t)
#+END_SRC
*** Dired Tweaks
#+BEGIN_SRC emacs-lisp
    (use-package dired
      :ensure nil ;; built-in
      :hook
      (dired-mode . dired-hide-details-mode)
      :config
      (setq dired-dwim-target t)                  ;; do what I mean
      (setq dired-recursive-copies 'always)       ;; don't ask when copying directories
      (setq dired-create-destination-dirs 'ask)
      (setq dired-clean-confirm-killing-deleted-buffers nil)
      (setq dired-make-directory-clickable t)
      (setq dired-mouse-drag-files t)
      (setq dired-kill-when-opening-new-dired-buffer t)   ;; Tidy up open buffers by default
      (setq dired-use-ls-dired t
            dired-listing-switches "-aBhl  --group-directories-first"))

    (put 'dired-find-alternate-file 'disabled nil)

    (use-package nerd-icons-dired
      :after dired
      :hook
      (dired-mode . nerd-icons-dired-mode))
#+END_SRC

*** Harpoon
#+BEGIN_SRC  emacs-lisp
    (use-package harpoon 
      :bind (("C-c 1" . harpoon-go-to-1)
    		 ("C-c 2" . harpoon-go-to-2)
    		 ("C-c 3" . harpoon-go-to-3)
    		 ("C-c 4" . harpoon-go-to-4)
    		 ("C-c 5" . harpoon-go-to-5)

    		 ("C-c H a" . harpoon-add-file)
    		 ("C-c H l" . harpoon-toggle-quick-menu)
    		 ("C-c H f" . harpoon-toggle-file)
    		 ("C-c H H" . harpoon-quick-menu-hydra))
      :ensure t)
#+END_SRC

* Helper packages
** Midnight commander
Runs clean buffer list at midnight to keep performance up
#+BEGIN_SRC emacs-lisp
    (setq midnight-mode t)
#+END_SRC

** Surround
Interact with surrounds remove add them change them

#+BEGIN_SRC emacs-lisp
    (use-package surround :ensure t)
#+END_SRC

** Move Files
#+BEGIN_SRC emacs-lisp
    (use-package move-text 
      :bind(
    		("M-j" . move-text-down)
    		("M-k" . move-text-up))
      :ensure t)


#+end_src

** Better undo and redo
#+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :config (global-undo-tree-mode))
#+END_SRC

** Making Emacs more explorable
#+BEGIN_SRC emacs-lisp
    (use-package helpful :ensure t)
#+END_SRC

** Manage System packages from inside Emacs
#+BEGIN_SRC emacs-lisp
    (use-package system-packages :ensure t)
#+END_SRC
** Manage System processes from inside Emacs

#+BEGIN_SRC emacs-lisp
    (use-package proced
      :ensure nil
      :commands proced
      :bind (("C-M-p" . proced))
      :custom
      (proced-auto-update-flag t)
      (proced-goal-attribute nil)
      (proced-show-remote-processes t)
      (proced-enable-color-flag t)
      (proced-format 'custom)
      :config
      (add-to-list
       'proced-format-alist
       '(custom user pid ppid sess tree pcpu pmem rss start time state (args comm))))
#+END_SRC

** Useful commands
Provides search and navigation commands based on the Emacs completion function.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.
#+begin_src emacs-lisp
    (use-package consult
      :ensure t
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)
      (advice-add #'register-preview :override #'consult-register-window)
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref))
#+end_src

** Collection of useful commands
#+BEGIN_SRC emacs-lisp
    (use-package crux :ensure t)
#+END_SRC

* File specific Modes
** PDF Tools
#+begin_src emacs-lisp
    (use-package pdf-tools
      :ensure t)
#+END_SRC

** Python
#+begin_src emacs-lisp
    (use-package pet
      :ensure t
      :config
      (add-hook 'python-base-mode-hook 'pet-mode -10))

    (use-package pyvenv :ensure t)
#+END_SRC
** Markdown
*** Markdown Mode
#+begin_src emacs-lisp
    (use-package markdown-mode
      :ensure t
      :mode ("README\\.md\\'" . gfm-mode)
      :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Nix
#+begin_src emacs-lisp
    (use-package nix-mode
      :ensure t)
#+END_SRC

** Org
*** Org Mode

#+begin_src emacs-lisp
    (use-package org
      :ensure t
      :custom
      (org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.
      (org-startup-indented t)
      (org-startup-with-inline-images t)
      (org-image-actual-width '(450))
      (org-fold-catch-invisible-edits 'error)
      (org-pretty-entities t)
      (org-id-link-to-org-use-id t)
      (org-fold-catch-invisible-edits 'show)

      :hook
      (org-mode . org-indent-mode))

    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.4))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.3))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.2))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
     '(org-level-6 ((t (:inherit outline-5 :height 1.0))))
     '(org-level-7 ((t (:inherit outline-5 :height 1.0)))))

    ;; (add-hook 'org-mode-hook 'visual-line-mode)

    (setq org-startup-folded 'fold)
#+end_src
*** Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :ensure t
      :after org
      :commands toc-org-enable
      :hook (org-mode . toc-org-mode))
#+end_src
*** Org Modern
#+BEGIN_SRC emacs-lisp
    (use-package org-modern
      :ensure t
      :after  org
      :hook (org-mode . org-modern-mode))
#+END_SRC

* Keymaps
** Meow
*** Meow Basic Layout

#+BEGIN_SRC emacs-lisp
    (use-package meow :ensure t)

    (defun meow-setup ()
      (setq meow-cheatsheet-physical-layout meow-cheatsheet-physical-layout-iso)
      (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwertz)
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       '("<escape>" . ignore))
      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       
       '("?" . meow-cheatsheet))

      (meow-normal-define-key
       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)

       '("-" . negative-argument)

       '("/" . comment-or-uncomment-region)

       '("," . meow-inner-of-thing)
       '("." . meow-bounds-of-thing)
       '(";" . meow-beginning-of-thing)
       '(":" . meow-end-of-thing)

       '("a" . weow-append)
       '("A" . meow-open-below)

       '("b" . meow-back-word)
       '("B" . meow-back-symbol)
       '("c" . meow-change)
       
       '("d" . meow-delete)
       '("D" . meow-backward-delete)

       '("e" . meow-next-word)
       '("E" . meow-next-symbol)
       '("f" . meow-find)
       
       '("g" . meow-cancel-selection)
       
       '("R" . meow-swap-grab)
       '("Y" . meow-sync-grab)
       '("G" . meow-grab)

       '("h" . meow-left)
       '("i" . meow-insert)
       '("j" . meow-next)
       '("k" . meow-prev)
       '("l" . meow-right)
       '("n" . meow-search)
       '("o" . meow-block)
       '("O" . meow-to-block)
       
       '("p" . meow-yank)
       '("P" . clipboard-yank)

       '("H" . meow-left-expand)
       '("I" . meow-open-above)
       '("J" . meow-next-expand)
       '("K" . meow-prev-expand)
       '("L" . meow-right-expand)

       '("q" . kmacro-start-macro-or-insert-counter)
       '("Q" . meow-end-or-call-kmacro)

       '("r" . meow-replace)
       '("s" . meow-kill)
       '("t" . meow-till)

       (cons "S" surround-keymap)

       '("u" . undo-tree-undo)
       '("U" . undo-tree-redo)

       '("v" . meow-visit)
       '("w" . meow-mark-word)
       '("W" . meow-mark-symbol)
       '("x" . meow-line)
       '("X" . meow-goto-line)
       '("y" . meow-save)
       '("z" . meow-pop-selection)
       '("'" . repeat)
       '("<escape>" . ignore)))

    (meow-setup)
    (setq meow-keypad-leader-dispatch "C-c")
    (meow-global-mode 1)
#+END_SRC

*** Meow Things for semantic editing
#+BEGIN_SRC emacs-lisp
    (use-package meow-tree-sitter
      :ensure t
      :after (meow treesitter))
    (meow-tree-sitter-register-defaults)

#+end_src
** Window / Buffer Nav
*** Mark Ring Nav
#+begin_src emacs-lisp
    (defun marker-is-point-p (marker)
      "test if marker is current point"
      (and (eq (marker-buffer marker) (current-buffer))
           (= (marker-position marker) (point))))

    (defun push-mark-maybe ()
      "push mark onto `global-mark-ring' if mark head or tail is not current location"
      (if (not global-mark-ring) (error "global-mark-ring empty")
        (unless (or (marker-is-point-p (car global-mark-ring))
                    (marker-is-point-p (car (reverse global-mark-ring))))
          (push-mark))))


    (defun backward-global-mark ()
      "use `pop-global-mark', pushing current point if not on ring."
      (interactive)
      (push-mark-maybe)
      (when (marker-is-point-p (car global-mark-ring))
        (call-interactively 'pop-global-mark))
      (call-interactively 'pop-global-mark))

    (defun forward-global-mark ()
      "hack `pop-global-mark' to go in reverse, pushing current point if not on ring."
      (interactive)
      (push-mark-maybe)
      (setq global-mark-ring (nreverse global-mark-ring))
      (when (marker-is-point-p (car global-mark-ring))
        (call-interactively 'pop-global-mark))
      (call-interactively 'pop-global-mark)
      (setq global-mark-ring (nreverse global-mark-ring)))

    (global-set-key (kbd "M-h") 'backward-global-mark)
    (global-set-key (kbd "M-l") 'forward-global-mark)

#+end_src
*** Buffer
#+begin_src emacs-lisp
    (global-set-key (kbd "C-c b C") 'clean-buffer-list)
    (global-set-key (kbd "C-c b k") 'kill-current-buffer)
    (global-set-key (kbd "C-c b K") 'kill-some-buffers)
    (global-set-key (kbd "C-c b O") 'crux-kill-other-buffers)
    (global-set-key (kbd "C-c b r") 'revert-buffer)
    (global-set-key (kbd "C-c b b") 'my/find-buffer)
    (global-set-key (kbd "C-c b i") 'ibuffer)
#+END_SRC

*** Switching Windows
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c w h") 'windmove-left)
    (global-set-key (kbd "C-c w l") 'windmove-right)
    (global-set-key (kbd "C-c w k") 'windmove-up)
    (global-set-key (kbd "C-c w j") 'windmove-down)

    (global-set-key (kbd "C-c w v") 'split-window-right)
    (global-set-key (kbd "C-c w s") 'split-window-below)

    (global-set-key (kbd "C-c w d") 'delete-window)
    (global-set-key (kbd "C-c w o") 'delete-other-windows)
#+END_SRC
** Development
*** Terminal
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c t T") 'my/eat)
    (global-set-key (kbd "C-c t t") 'my/eat-other-window)
#+END_SRC

*** Error
**** Errors in Compilation

Make compilation look better and therefore make it work with modern tools
#+begin_src emacs-lisp
    (use-package fancy-compilation
      :ensure t
      :config
      (setq fancy-compilation-override-colors nil)
      :commands (fancy-compilation-mode))

    (setq compilation-scroll-output t)

    (with-eval-after-load 'compile
      (fancy-compilation-mode))
#+END_SRC

#+begin_src emacs-lisp
    (defun compile-or-open ()
      "Open the existing compilation buffer in a split window, or run compile if it doesn't exist."
      (interactive)
      (let ((compilation-buffer (get-buffer "*compilation*")))
        (if compilation-buffer
            (progn
              (unless (get-buffer-window compilation-buffer)
                (save-selected-window
                  (select-window (split-window-below -15))
                  (switch-to-buffer compilation-buffer)
                  (shrink-window-if-larger-than-buffer))))
          (call-interactively 'compile))))

    (global-set-key (kbd "C-c C o") 'compile-or-open)
    (global-set-key (kbd "C-c C c") 'projectile-compile-project)
    (global-set-key (kbd "C-c C r") 'recompile)
    (global-set-key (kbd "C-c C k") 'kill-compilation)

    (global-set-key (kbd "C-c C e j") 'compilation-next-error)
    (global-set-key (kbd "C-c C e k") 'compilation-previous-error)
    (global-set-key (kbd "C-c C e l") 'consult-compile-error)
#+END_SRC

** Replacing stuff
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c r s") 'replace-string)
    (global-set-key (kbd "C-c r r") 'query-replace)
#+END_SRC

** File Stuff
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c f f") 'my/find-file)
    (global-set-key (kbd "C-c f F") 'find-file)
    (global-set-key (kbd "C-c f e") 'my/dired)
#+END_SRC

** Search Stuff
#+begin_src emacs-lisp
    (global-set-key (kbd "C-c s g") 'consult-ripgrep)
    (global-set-key (kbd "C-c s s") 'occur)
    (global-set-key (kbd "C-c s o") 'consult-outline)
    (global-set-key (kbd "C-c s l") 'consult-line)
#+END_SRC

